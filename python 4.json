{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "tuple = (\"apple\", \"banana\", \"cherry\")\nprint(tuple)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "('apple', 'banana', 'cherry')\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "code",
      "source": "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "3\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 2
    },
    {
      "cell_type": "code",
      "source": "thistuple = (\"apple\",)\nprint(type(thistuple))\n\nthistuple = (\"apple\")\nprint(type(thistuple))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'tuple'>\n<class 'str'>\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 3
    },
    {
      "cell_type": "code",
      "source": "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "('cherry', 'orange', 'kiwi')\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 4
    },
    {
      "cell_type": "code",
      "source": "k=5\nfor i in range(0,5):\n    for j in range(0,5-i):\n        print(k,end='')\n    print()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "55555\n5555\n555\n55\n5\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 5
    },
    {
      "cell_type": "code",
      "source": "k=1\nn=0\nfor i in range(1,4):\n    for j in range(0,(2*n+1)):\n        print(k,end='')\n        k+=1\n    n+=1\n    print()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "1\n234\n56789\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 6
    },
    {
      "cell_type": "code",
      "source": "k=6\nfor i in range(1,7):\n    for j in range(0,k):\n        print(j,end=' ')\n    k-=1\n    print()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "0 1 2 3 4 5 \n0 1 2 3 4 \n0 1 2 3 \n0 1 2 \n0 1 \n0 \n",
          "output_type": "stream"
        }
      ],
      "execution_count": 7
    },
    {
      "cell_type": "code",
      "source": "for i in range(1,6):\n    k=0\n    for j in range(1,i+1):\n        print(i-k,end=' ')\n        k+=1\n    print()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "1 \n2 1 \n3 2 1 \n4 3 2 1 \n5 4 3 2 1 \n",
          "output_type": "stream"
        }
      ],
      "execution_count": 8
    },
    {
      "cell_type": "code",
      "source": "for i in range(0,5):\n    k=1\n    for j in range(0,i+1):\n        print(k,end=' ')\n        k+=1\n    print()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "1 \n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5 \n",
          "output_type": "stream"
        }
      ],
      "execution_count": 16
    },
    {
      "cell_type": "code",
      "source": "a=[[2,5]]\nb=[[6,4]]\nc=[[0,0]]\nd=[]\nfor i in range (len(a)):\n    for j in range (len(a[0])):\n        c[i][j]=a[i][j]+b[i][j]\n        d.append(c[i][j])\nprint(d)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[8, 9]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 17
    },
    {
      "cell_type": "code",
      "source": "a=[[4,6]]\nb=[[1,3]]\nc=[[0,0]]\nd=[]\nfor i in range (len(a)):\n    for j in range (len(a[0])):\n        c[i][j]=a[i][j]-b[i][j]\n        d.append(c[i][j])\nprint(d)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[3, 3]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 18
    },
    {
      "cell_type": "code",
      "source": "k=4\na=[[2,4],[5,1]]\nb=[[0,0],[0,0]]\nfor i in range(len(a)):\n    for j in range(len(a[0])):\n        b[i][j]=k*a[i][j]\nprint(b)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[[8, 16], [20, 4]]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 20
    },
    {
      "cell_type": "code",
      "source": "k=2\na=[[4,6]]\nb=[[0,0]]\nfor i in range(len(a)):\n    for j in range(len(a[0])):\n        b[i][j]=k*a[i][j]\nprint(b)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[[8, 12]]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 22
    },
    {
      "cell_type": "code",
      "source": "a=[[2,4],[3,6]]\nb=[[0,0],[0,0]]\nfor i in range (len(a)):\n    for j in range(len(a[0])):\n        b[i][j]=a[i][j]\nprint(b)\n        ",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[[2, 4], [3, 6]]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 23
    },
    {
      "cell_type": "code",
      "source": "a=[[1,3]]\nb=[[2,4]]\nc=[[0,0]]\nfor i in range (len(a)):\n    for j in range(len(a[0])):\n        c[i][j]=a[i][j]*b[i][j]\nprint(c)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "[[2, 12]]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 25
    },
    {
      "cell_type": "code",
      "source": "a=[[1,3],[1,7]\nb=[[2,4]]\nc=[[0,0]]\nfor i in range (len(a)):\n    for j in range(len(a[0])):\n        c[i][j]=a[i][j]*b[i][j]\nprint(c)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}