{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "def linearSearch(array, n, x):\n\n    # Going through array sequencially\n    for i in range(0, n):\n        if (array[i] == x):\n            return i\n    return -1\n\n\narray = [2, 4, 0, 1, 9]\nx = 1\nn = len(array)\nresult = linearSearch(array, n, x)\nif(result == -1):\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index: \", result)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Element found at index:  3\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "code",
      "source": "def binarySearch(array, x, low, high):\n\n    # Repeat until the pointers low and high meet each other\n    while low <= high:\n\n        mid = low + (high - low)//2\n\n        if x == array[mid]:\n            return mid\n\n        elif x > array[mid]:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1\n\n\narray = [3, 4, 5, 6, 7, 8, 9]\nx = 4\n\nresult = binarySearch(array, x, 0, len(array)-1)\n\nif result != -1:\n    print(\"Element is present at index \" + str(result))\nelse:\n    print(\"Not found\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Element is present at index 1\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 3
    },
    {
      "cell_type": "code",
      "source": "# Selection sort in Python\n\n\ndef selectionSort(array, size):\n   \n    for step in range(size):\n        min_idx = step\n\n        for i in range(step + 1, size):\n         \n            \n            if array[i] < array[min_idx]:\n                min_idx = i\n         \n        \n        (array[step], array[min_idx]) = (array[min_idx], array[step])\n\n\ndata = [-2, 45, 0, 11, -9]\nsize = len(data)\nselectionSort(data, size)\nprint('Sorted Array in Ascending Order:')\nprint(data)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Sorted Array in Ascending Order:\n[-9, -2, 0, 11, 45]\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 4
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}